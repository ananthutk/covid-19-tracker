{"version":3,"sources":["components/CountryCaseStatus/CountryCaseStatus.tsx","actions/countryDataAction.ts","components/Header/Header.tsx","components/StateSelector/StateSelector.tsx","actions/allStatesTotalDataAction.ts","App.tsx","serviceWorker.ts","reducers/countryDataReducer.ts","reducers/allStatesTotalDataReducer.ts","reducers/index.ts","index.tsx"],"names":["CountryCaseStatus","dispatch","useDispatch","countryData","useSelector","state","useEffect","axios","get","then","response","data","type","payload","catch","error","fetchCountryDataFailure","className","confirmed","active","recovered","deaths","Header","style","fontWeight","StateSelector","useState","totalData","setTotalData","currentState","setcurrentState","filteredData","setFilteredData","allStatesTotalData","loading","pieConfirmedtotal","Object","values","reduce","t","pieActive","pieRecovered","pieDeaths","console","log","labels","bardata","x","y","Plotly","height","width","fetchallStatesTotalDataFailure","map","item","filter","padding","onChange","e","value","target","key","id","App","Boolean","window","location","hostname","match","initialState","countryDataReducer","action","allStatesDataReducer","rootReducers","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.7d1514be.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\n// import { Container, Col, Row } from 'react-bootstrap';\n// import Card from \"react-bootstrap/Card\";\nimport './CountryCaseStatus.css'\nimport { fetchCountryData } from '../../actions/countryDataAction'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ICountryData } from '../../reducers/countryDataReducer'\n\nfunction CountryCaseStatus() {\n\n  const dispatch = useDispatch()\n  const countryData = useSelector((state: ICountryData) => state.countryData)\n\n  useEffect(() => {\n    // console.log('component mounted data', countryData)\n    dispatch(fetchCountryData())\n  }, [])  \n\n\n\n  return (\n    <div className={'mainSection'}>\n      <div className=\"subCardDiv\">\n        <div className=\"caseTitle\">Total Confirmed Cases</div>\n        <div className=\"caseCount\">{countryData.confirmed}</div>\n      </div>\n      <div className=\"subCardDiv\">\n        <div className=\"caseTitle\">Active Cases</div>\n        <div className=\"caseCount\">{countryData.active}</div>\n      </div>\n      <div className=\"subCardDiv\">\n        <div className=\"caseTitle\">Recovered Cases</div>\n        <div className=\"caseCount\">{countryData.recovered}</div>\n      </div>\n      <div className=\"subCardDiv\">\n        <div className=\"caseTitle\">Deaths</div>\n        <div className=\"caseCount\">{countryData.deaths}</div>\n      </div>\n    </div>\n  )\n}\n\nexport default CountryCaseStatus\n","import axios from 'axios'\nimport { ICountryData } from '../reducers/countryDataReducer'\n\nexport const fetchCountryDataSuccess = (countryData: ICountryData) => {\n  return {\n    type: \"FETCH_COUNTRYDATA_SUCCESS\",\n    payload: countryData\n  }\n}\n\nexport const fetchCountryDataFailure = (error: any) => {\n  return {\n    type: \"FETCH_COUNTRYDATA_FAILURE\",\n    payload: error\n  }\n}\n\nexport const fetchCountryData = () => {\n  return (dispatch: any) => {\n    // console.log('action call')\n    axios.get(\"https://api.covidindiatracker.com/total.json\")\n      .then((response) => {\n        // debugger\n        // console.log(\"response is \", response.data)\n        const data:ICountryData = response.data\n        dispatch(fetchCountryDataSuccess(data))\n      })\n      .catch((error) => {\n        // console.log(\"error is\", error)\n        dispatch(fetchCountryDataFailure(error))\n      })\n  }\n}","import React from 'react'\n\nfunction Header() {\n  return (\n    <div>\n      <h1 style={{fontWeight:100}} >Covid 19 Tracker India</h1>\n    </div>\n  )\n}\n\nexport default Header\n","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector, shallowEqual } from 'react-redux';\nimport CountryCaseStatus from '../CountryCaseStatus/CountryCaseStatus';\nimport { fetchallStatesData } from '../../actions/allStatesTotalDataAction'\nimport { IAllStatesTotalData } from '../../reducers/allStatesTotalDataReducer';\nimport './StateSelector.css'\nimport * as Plotly from 'plotly.js';\n\nfunction StateSelector() {\n  const [totalData, setTotalData] = useState({})\n  const [currentState, setcurrentState] = useState('')\n  const [filteredData, setFilteredData] = useState({})\n\n  const dispatch = useDispatch()\n  const { allStatesTotalData, loading } = useSelector<IAllStatesTotalData, IAllStatesTotalData>((state: IAllStatesTotalData) => {\n    return {\n      allStatesTotalData: state.allStatesTotalData,\n      loading: state.loading,\n    }\n  })\n\n  //Pie Chart\n\n  // const pieData = Object.values(filteredData).map((item: any) => (\n  //   item.confirmed\n  // ))\n\n  const pieConfirmedtotal = Object.values(filteredData).reduce((t: number, { confirmed }: any) => t + confirmed, 0)\n  const pieActive = Object.values(filteredData).reduce((t: number, { active }: any) => t + active, 0)\n  const pieRecovered = Object.values(filteredData).reduce((t: number, { recovered }: any) => t + recovered, 0)\n  const pieDeaths = Object.values(filteredData).reduce((t: number, { deaths }: any) => t + deaths, 0)\n  // console.log('pieData', pieData)\n  console.log('pieConfirmedtotal-', pieConfirmedtotal, ',pieActive-', pieActive, ',-pieRecovered-', pieRecovered, '-pieDeaths', pieDeaths)\n  debugger\n  useEffect(() => {\n    var data: any = [{\n      values: [pieConfirmedtotal, pieActive, pieRecovered, pieDeaths],\n      // value:[123456789,123456789,123456789,123456789],\n      labels: ['Total Confirmed Cases', 'Active Cases', 'Recovered Cases', 'Deaths'],\n      type: 'pie'\n    }];\n\n    var layout = {\n      height: 400,\n      width: 500\n    };\n\n    var bardata = [\n      {\n        x: ['Total Confirmed Cases', 'Active Cases', 'Recovered Cases', 'Deaths'],\n        y: [pieConfirmedtotal, pieActive, pieRecovered, pieDeaths],\n        // type: 'a'\n      }\n    ];\n\n    Plotly.newPlot('pieChart', data, layout);\n    Plotly.newPlot('barChart', bardata);\n  }, [pieConfirmedtotal])\n\n  //\n\n  useEffect(() => {\n    dispatch(fetchallStatesData())\n    console.log('allStatesData ', allStatesTotalData)\n  }, [])\n\n  useEffect(() => {\n    console.log(allStatesTotalData)\n    setTotalData(allStatesTotalData)\n    setFilteredData(allStatesTotalData)\n    console.log('totalData', totalData)\n    // debugger\n\n  }, [allStatesTotalData])\n\n\n  useEffect(() => {\n    console.log('totalData after updation', totalData)\n    Object.values(totalData).map((item: any) => {\n      console.log('kk', item)\n    })\n  }, [totalData])\n\n  useEffect(() => {\n    console.log(\"current state\", currentState)\n    const filteredData = Object.values(totalData).filter((item: any) => {\n      return (\n        item.state == currentState\n      )\n    })\n    setFilteredData(filteredData)\n  }, [currentState])\n\n  const setcurrentStateFn = (value: any) => {\n    if (value != 0) {\n      setcurrentState(value)\n    } else {\n      setFilteredData(allStatesTotalData)\n    }\n  }\n\n  return (\n    <div>\n      <div>\n        <label style={{ padding: '10px' }}>Filter By State</label>\n\n        <select onChange={(e) => setcurrentStateFn(e.target.value)} style={{ width: '85%', padding: '10px' }}>\n          <option value={0}>All</option>\n          {Object.values(totalData).map((item: any) => {\n            return (\n              <option key={item.state} value={item.state}>{item.state} - ({item.id})</option>\n            );\n          })}\n        </select>\n      </div>\n      <div className=\"mainTableSection\">\n\n        <table>\n          <tr>\n            <th>State</th>\n            <th>Total Confirmed Cases</th>\n            <th>Active Cases</th>\n            <th>Recovered Cases</th>\n            <th>Deaths</th>\n          </tr>\n          {Object.values(filteredData).map((item: any) => (\n            <tr>\n              <td>{item.state}</td>\n              <td>{item.confirmed}</td>\n              <td>{item.active}</td>\n              <td>{item.recovered}</td>\n              <td>{item.deaths}</td>\n            </tr>\n          ))}\n        </table>\n      </div>\n      <div className=\"pieAndChartSection\">\n        <div id=\"pieChart\" style={{ width: '600px', height: '500px' }}></div>\n        <div id=\"barChart\" style={{ width: '600px', height: '500px' }}></div>\n      </div>\n    </div>\n  )\n}\n\n\n\nexport default StateSelector\n","import axios from 'axios'\nimport { IAllStatesTotalData } from '../reducers/allStatesTotalDataReducer'\n\n\nexport const fetchallStatesTotalDataSuccess = (allStatesTotalData: IAllStatesTotalData[]) => {\n  return {\n    type: \"FETCH_ALLSTATESDATA_SUCCESS\",\n    payload: allStatesTotalData\n  }\n}\n\nexport const fetchallStatesTotalDataFailure = (error: any) => {\n  return {\n    type: \"FETCH_ALLSTATESDATA_FAILURE\",\n    payload: error\n  }\n}\n\nexport const fetchallStatesData = () => {\n  return (dispatch: any) => {\n    console.log('all states data')\n    axios.get(\"https://api.covidindiatracker.com/state_data.json\")\n      .then((response) => {\n        // debugger\n        console.log(\"response all states  \", response.data)\n        const data = response.data\n        dispatch(fetchallStatesTotalDataSuccess(data))\n      })\n      .catch((error) => {\n        console.log(\"error all states\", error)\n        dispatch(fetchallStatesTotalDataFailure(error))\n      })\n  }\n}","import React from 'react';\nimport './App.css';\nimport CountryCaseStatus from './components/CountryCaseStatus/CountryCaseStatus';\nimport Header from './components/Header/Header';\nimport StateSelector from './components/StateSelector/StateSelector';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <CountryCaseStatus />\n      <StateSelector/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export interface ICountryData {\n  countryData: IData\n}\n\nexport interface IData {\n  active?: number;\n  recovered?: number;\n  deaths?: number;\n  confirmed?: number;\n}\n\nexport interface IAction {\n  type: string,\n  payload: any\n}\n\nconst initialState: ICountryData = {\n  countryData: {}\n}\n\nconst countryDataReducer = (state: ICountryData = initialState, action: IAction) => {\n  switch (action.type) {\n    case 'FETCH_COUNTRYDATA_SUCCESS':\n      return action.payload\n    case 'FETCH_COUNTRYDATA_FAILURE':\n      return action.payload\n    default:\n      return state\n  }\n}\nexport default countryDataReducer","export interface IAllStatesTotalData {\n  allStatesTotalData: IStateData[],\n  loading: boolean\n}\n\nexport interface IStateData {\n  active?: number;\n  recovered?: number;\n  deaths?: number;\n  confirmed?: number;\n  state?: string;\n}\n\nexport interface IAction {\n  type: string,\n  payload: any\n}\n\nconst initialState: IAllStatesTotalData = {\n  allStatesTotalData: [],\n  loading: false\n}\n\nconst allStatesDataReducer = (state:IAllStatesTotalData = initialState, action: IAction) => {\n  switch (action.type) {\n    case 'FETCH_ALLSTATESDATA_SUCCESS':\n      // return {...state, allStatesTotalData: [...state.allStatesTotalData, action.payload], loading:true}\n      return action.payload\n    case 'FETCH_ALLSTATESDATA_FAILURE':\n      // return {...state, allStatesTotalData: [...state.allStatesTotalData, action.payload], loading:true}\n      return action.payload\n    default:\n      return state\n  }\n}\nexport default allStatesDataReducer","import { combineReducers } from 'redux';\nimport countryDataReducer from './countryDataReducer'\nimport allStatesDataReducer from './allStatesTotalDataReducer'\n\nconst rootReducers = combineReducers({\n  countryData: countryDataReducer,\n  allStatesTotalData: allStatesDataReducer,\n})\nexport default rootReducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk'\nimport { Provider } from 'react-redux'\nimport rootReducers from './reducers'\nconst store = createStore(rootReducers, composeWithDevTools(applyMiddleware(thunk)))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}